package com.example.http4kdemo




import org.http4k.core.*
import org.http4k.core.Method.*
import org.http4k.routing.bind
import org.http4k.routing.routes
import org.http4k.server.SunHttp
import org.http4k.server.asServer

/*
generated by this prompt:

can you write me a simple application using http4k with 4 api:

GET users/  <- list all users
GET user/{userid} <- to get details of the user
POST user <- to create a new user
PUT user/{userid} <- to edit an existing user
 */
data class User(val id: String, val name: String, val email: String)

class UserDatabase {
    private val users = mutableMapOf<String, User>()

    fun getAllUsers(): List<User> = users.values.toList()

    fun getUserById(id: String): User? = users[id]

    fun createUser(user: User) {
        users[user.id] = user
    }

    fun updateUser(id: String, user: User) {
        users[id] = user
    }
}

fun main() {
    val userDb = UserDatabase()

    val listUsersHandler = { _: Request ->
        Response(Status.OK).body(userDb.getAllUsers().joinToString("\n"))
    }

    val getUserHandler = { req: Request ->
        val userId = req.path("userid")!!
        val user = userDb.getUserById(userId)
        if (user == null) Response(Status.NOT_FOUND)
        else Response(Status.OK).body(user.toString())
    }

    val createUserHandler = { req: Request ->
        val user = req.bodyString().split(",")
            .let { User(it[0], it[1], it[2]) }
        userDb.createUser(user)
        Response(Status.CREATED)
    }

    val updateUserHandler = { req: Request ->
        val userId = req.path("userid")!!
        val user = req.bodyString().split(",")
            .let { User(userId, it[0], it[1]) }
        userDb.updateUser(userId, user)
        Response(Status.OK)
    }

    val app = routes(
        "/users" bind GET to listUsersHandler,
        "/user/{userid}" bind GET to getUserHandler,
        "/user" bind POST to createUserHandler,
        "/user/{userid}" bind PUT to updateUserHandler
    )

    app.asServer(SunHttp(8080)).start()
}