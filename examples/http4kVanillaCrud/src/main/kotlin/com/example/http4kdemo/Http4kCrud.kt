package com.example.http4kdemo

/*
generated by this prompt:


can you write me a simple crud application to manage users using http4k with 4 api:

GET users/  <- list all users
GET user/{userid} <- to get details of the user
POST user <- to create a new user
PUT user/{userid} <- to replace an existing user


I'll give you a description of what is http4k and some examples with the style I want you to follow when writing the applicaiton
 ---prompt vanilla
 */

//First, let's import the required packages:


import org.http4k.core.*
import org.http4k.core.Method.*
import org.http4k.core.Status.Companion.BAD_REQUEST
import org.http4k.core.Status.Companion.CREATED
import org.http4k.core.Status.Companion.NOT_FOUND
import org.http4k.core.Status.Companion.OK
import org.http4k.routing.bind
import org.http4k.routing.path
import org.http4k.routing.routes
import org.http4k.server.Jetty
import org.http4k.server.asServer

//Let's create a data class to represent the User and a simple in-memory storage for the users:


data class User(val id: Int, val name: String, val email: String)

val users = mutableMapOf<Int, User>()

//Define the handlers for each route:


val listUsers: HttpHandler = { _: Request ->
    val userList = users.values.joinToString(separator = "\n") { "${it.id}: ${it.name} (${it.email})" }
    Response(OK).body(userList)
}

val getUser: HttpHandler = { req: Request ->
    val userId = req.path("userId")?.toIntOrNull()
    val user = userId?.let { users[it] }

    if (user != null) {
        Response(OK).body("${user.id}: ${user.name} (${user.email})")
    } else {
        Response(NOT_FOUND).body("User not found")
    }
}

val createUser: HttpHandler = { req: Request ->
    val userData = req.bodyString().split(",")

    if (userData.size == 3) {
        val id = userData[0].toIntOrNull()
        val name = userData[1]
        val email = userData[2]

        if (id != null) {
            users[id] = User(id, name, email)
            Response(CREATED).body("User created")
        } else {
            Response(BAD_REQUEST).body("Invalid user data")
        }
    } else {
        Response(BAD_REQUEST).body("Invalid user data")
    }
}

val updateUser: HttpHandler = { req: Request ->
    val userId = req.path("userId")?.toIntOrNull()
    val userData = req.bodyString().split(",")

    if (userData.size == 3) {
        val id = userData[0].toIntOrNull()
        val name = userData[1]
        val email = userData[2]

        if (id != null && users.containsKey(userId)) {
            users[userId!!] = User(id, name, email)
            Response(OK).body("User updated")
        } else {
            Response(NOT_FOUND).body("User not found")
        }
    } else {
        Response(BAD_REQUEST).body("Invalid user data")
    }
}

//Now, let's define the routes for our user management application using the handlers:


val userRoutes = routes(
    "/users" bind GET to listUsers,
    "/user/{userId}" bind GET to getUser,
    "/user" bind POST to createUser,
    "/user/{userId}" bind PUT to updateUser
)

//Finally, let's start the server:

fun main() {
    userRoutes.asServer(Jetty(9000)).start()
}

