package com.example.http4kdemo

import org.http4k.core.*
import org.http4k.core.Status.Companion.BAD_REQUEST
import org.http4k.core.Status.Companion.CREATED
import org.http4k.core.Status.Companion.NOT_FOUND
import org.http4k.core.Status.Companion.OK
import org.http4k.core.Method.*
import org.http4k.core.Request
import org.http4k.core.Response
import org.http4k.core.UriTemplate.Companion.from
import org.http4k.filter.CorsPolicy.Companion.UnsafeGlobalPermissive
import org.http4k.filter.ServerFilters.Cors
import org.http4k.routing.bind
import org.http4k.routing.path
import org.http4k.routing.routes
import org.http4k.server.SunHttp
import org.http4k.server.asServer

/*
generated by this prompt:

can you write me a simple application using http4k with 4 api:

GET users/  <- list all users
GET user/{userid} <- to get details of the user
POST user <- to create a new user
PUT user/{userid} <- to edit an existing user
 */
data class User(val id: Int, val name: String, val email: String)

// In-memory database of users
val users = mutableListOf(
    User(1, "Alice", "alice@example.com"),
    User(2, "Bob", "bob@example.com")
)

fun main() {
    val app: HttpHandler = Cors(UnsafeGlobalPermissive)
        .then(routes(
            "/users" bind GET to { _: Request -> Response(OK).body(users) },
            "/user/{id}" bind GET to { req: Request ->
                val id = req.path("id")?.toIntOrNull()
                if (id != null) {
                    val user = users.find { it.id == id }
                    if (user != null) {
                        Response(OK).body(user)
                    } else {
                        Response(NOT_FOUND)
                    }
                } else {
                    Response(BAD_REQUEST)
                }
            },
            "/user" bind POST to { req: Request ->
                val user = req.bodyString().fromJson<User>()
                if (user != null) {
                    val id = users.maxByOrNull { it.id }?.id?.plus(1) ?: 1
                    val newUser = user.copy(id = id)
                    users.add(newUser)
                    Response(CREATED)
                        .header("Location", from("/user/{id}").expand("id" to id.toString()))
                        .body(newUser)
                } else {
                    Response(BAD_REQUEST)
                }
            },
            "/user/{id}" bind PUT to { req: Request ->
                val id = req.path("id")?.toIntOrNull()
                if (id != null) {
                    val user = users.find { it.id == id }
                    if (user != null) {
                        val updatedUser = req.bodyString().fromJson<User>()
                        if (updatedUser != null) {
                            val index = users.indexOf(user)
                            users[index] = updatedUser.copy(id = user.id)
                            Response(OK).body(updatedUser)
                        } else {
                            Response(BAD_REQUEST)
                        }
                    } else {
                        Response(NOT_FOUND)
                    }
                } else {
                    Response(BAD_REQUEST)
                }
            }
        ))

    app.asServer(SunHttp(8000)).start()
}

inline fun <reified T : Any> String.fromJson(): T? = try {
    org.http4k.format.Jackson.asA(this)
} catch (e: Exception) {
    null
}