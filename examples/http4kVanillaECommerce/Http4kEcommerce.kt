import org.http4k.core.*
import org.http4k.routing.*
import org.http4k.filter.ServerFilters.*
import org.http4k.core.Method.*
import org.http4k.core.Status.*

/* generated by

can you write me a application using http4k to implement a backend for creating a simple e-commerce website with user cart and products using http4k?

*/

import org.http4k.core.*
import org.http4k.filter.ServerFilters.CorsPolicy.Companion.UnsafeGlobalPermissive
import org.http4k.routing.bind
import org.http4k.routing.routes
import org.http4k.server.SunHttp
import org.http4k.server.asServer

fun main() {
    val productStore = ProductStore()
    val userStore = UserStore()
    val cartStore = CartStore()

    val app = routes(
        "/products" bind Method.GET to { _ -> Response(Status.OK).body(productStore.getAllProducts().toJson()) },
        "/products/{id}" bind Method.GET to { req -> Response(Status.OK).body(productStore.getProductById(req.path("id")!!.toInt()).toJson()) },
        "/users" bind Method.POST to { req ->
            val user = req.bodyString().fromJson<User>()
            userStore.addUser(user)
            Response(Status.CREATED).body(user.toJson())
        },
        "/users/{id}" bind Method.GET to { req -> Response(Status.OK).body(userStore.getUserById(req.path("id")!!.toInt()).toJson()) },
        "/carts" bind Method.POST to { req ->
            val cart = req.bodyString().fromJson<Cart>()
            cartStore.addCart(cart)
            Response(Status.CREATED).body(cart.toJson())
        },
        "/carts/{id}" bind Method.GET to { req -> Response(Status.OK).body(cartStore.getCartById(req.path("id")!!.toInt()).toJson()) },
        "/carts/{id}/add-product" bind Method.POST to { req ->
            val productId = req.bodyString().fromJson<Int>()
            val cart = cartStore.getCartById(req.path("id")!!.toInt())
            val product = productStore.getProductById(productId)
            cart.addProduct(product)
            Response(Status.OK).body(cart.toJson())
        }
    ).withFilter(CorsPolicy(UnsafeGlobalPermissive))

    app.asServer(SunHttp(8080)).start()
}

data class Product(val id: Int, val name: String, val price: Int)

class ProductStore {
    private val products = mutableListOf(
        Product(1, "Product A", 100),
        Product(2, "Product B", 200),
        Product(3, "Product C", 300),
        Product(4, "Product D", 400),
        Product(5, "Product E", 500),
    )

    fun getAllProducts(): List<Product> = products

    fun getProductById(id: Int): Product = products.find { it.id == id } ?: throw NotFoundException("Product not found")
}

data class User(val id: Int, val name: String)

class UserStore {
    private val users = mutableListOf<User>()

    fun addUser(user: User) {
        users.add(user.copy(id = users.size + 1))
    }

    fun getUserById(id: Int): User = users.find { it.id == id } ?: throw NotFoundException("User not found")
}

data class Cart(val id: Int, val userId: Int, val products: MutableList<Product> = mutableListOf()) {
    fun addProduct(product: Product) {
        products.add(product)
    }

    fun toJson(): String = "{\"id\":$id,\"userId\":$userId,\"products\":[${products.joinToString(",") { it.toJson() }}]}"
}

class CartStore {
    private val carts = mutableListOf<Cart>()

    fun addCart(cart: Cart) {
        carts.add(cart.copy(id = carts.size + 1))
    }

    fun getCartById(id: Int): Cart = carts.find { it.id == id } ?: throw NotFoundException("Cart not found")
}

fun Product.toJson(): String

}