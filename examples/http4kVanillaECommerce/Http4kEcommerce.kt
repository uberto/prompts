
/* generated by

Could you develop a Kotlin application with http4k framework that serves as the backend for a basic e-commerce website? The API must offer the following functionalities:

    Users can add and remove products to/from their shopping cart.
    Users can view the contents of their cart and the total cost.
    Users can perform the checkout process.

  I'll give you a description of what is http4k and some examples with the style I want you to follow when writing the application.
 ---prompt vanilla

*/
import org.http4k.core.*
import org.http4k.core.Method.*
import org.http4k.core.Status.Companion.BAD_REQUEST
import org.http4k.core.Status.Companion.OK
import org.http4k.filter.ServerFilters
import org.http4k.routing.RoutingHttpHandler
import org.http4k.routing.bind
import org.http4k.routing.routes
import org.http4k.server.Jetty
import org.http4k.server.asServer

data class Product(val id: Int, val name: String, val price: Double)
data class CartItem(val productId: Int, val quantity: Int)

// Example data
val products = mapOf(
    1 to Product(1, "Product A", 100.0),
    2 to Product(2, "Product B", 200.0),
    3 to Product(3, "Product C", 300.0)
)

val carts = mutableMapOf<String, MutableList<CartItem>>()

fun getCartTotal(user: String): Double {
    val cart = carts[user] ?: return 0.0
    return cart.sumByDouble { (productId, quantity) ->
        val product = products[productId] ?: 0.0
        product.price * quantity
    }
}

fun addToCart(user: String, productId: Int): Response {
    val product = products[productId]
    return if (product != null) {
        val cart = carts.getOrPut(user) { mutableListOf() }
        cart.add(CartItem(product.id, 1))
        Response(OK).body("Product added to cart.")
    } else {
        Response(BAD_REQUEST).body("Invalid product ID.")
    }
}

fun removeFromCart(user: String, productId: Int): Response {
    val cart = carts[user]
    return if (cart != null && products.containsKey(productId)) {
        cart.removeAll { it.productId == productId }
        Response(OK).body("Product removed from cart.")
    } else {
        Response(BAD_REQUEST).body("Invalid product ID or empty cart.")
    }
}

fun getCartTotalResponse(user: String): Response {
    val total = getCartTotal(user)
    return Response(OK).body("Total: $total")
}

fun checkout(user: String): Response {
    val total = getCartTotal(user)
    carts[user]?.clear()
    return Response(OK).body("Checkout complete. Total: $total")
}

val ecomRoutes: RoutingHttpHandler = routes(
    "/cart/add/{productId}" bind POST to { req: Request ->
        val user = req.header("WWW-Authenticate")
        val productId = req.path("productId")?.toIntOrNull()
        if (user != null && productId != null) {
            addToCart(user, productId)
        } else {
            Response(BAD_REQUEST)
        }
    },

    "/cart/remove/{productId}" bind POST to { req: Request ->
        val user = req.header("WWW-Authenticate")
        val productId = req.path("productId")?.toIntOrNull()
        if (user != null && productId != null) {
            removeFromCart(user, productId)
        } else {
            Response(BAD_REQUEST)
        }
    },

    "/cart/total" bind GET to { req: Request ->
        val user = req.header("WWW-Authenticate")
        if (user != null) {
            getCartTotalResponse(user)
        } else {
            Response(Status.UNAUTHORIZED)
        }
    },

    "/cart/checkout" bind POST to { req: Request ->
        val user = req.header("WWW-Authenticate")
        if (user != null) {
            checkout(user)
